/*

https://www.acmicpc.net/problem/1507

백준 온라인 저지 1507번: 궁금한 민호

*/

#define MAX 20
#include <stdio.h>

int a[MAX][MAX], d[MAX][MAX];
int result = 0;

void floyd(); // 플로이드 - 와샬 알고리즘 사용

int main()
{
	floyd();

	if (result != -1)
		printf("%d", result / 2);
	else
		printf("%d", result);

	return 0;
}

void floyd()
{
	int n, i, j, k;

	scanf("%d", &n); // 도시 개수

	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			scanf("%d", &a[i][j]); // 각 도시 이동에 필요한 시간
			d[i][j] = 1; // 1로 초기화
		}
	}

	for (k = 0; k < n; k++) {
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {	
				if (i == j || j == k || k == i) // 같은 도시로 이동하는 시간은 의미 x
					continue;
				else if (a[i][j] == a[i][k] + a[k][j]) // k를 거쳐서 가는 경로가 있을 때
					d[i][j] = 0; // 바로 가는 경로는 없어도 됨 (어차피 같은 값이니까)
				else if (a[i][j] > a[i][k] + a[k][j]) { // k를 거쳐서 가는 경로가 바로 가는 경로보다 빠를 때
					result = -1; // 이는 최소 이동 시간 그래프라고 할 수 없으므로 -1 출력
					return;
				}
			}
		}
	}

	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			if (d[i][j]) // 남은 도로의 이동시간 값을 다 더해주고, 중복해서 더했기에 2로 나눠준다
				result += a[i][j];
		}
	}
}