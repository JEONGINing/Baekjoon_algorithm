/*

https://www.acmicpc.net/problem/1149

백준 온라인 저지 1149번: RGB거리

*/

#include <iostream>
#include <vector>
#include <stdio.h>

using namespace std;

vector <int> colors[3];
int N;
int min_sum = 1000000;

int main()
{
	int R, G, B;

	colors[0].push_back(0);
	colors[1].push_back(0);
	colors[2].push_back(0); // 번호 맞추기 위해서 첫항에 0 넣기

	scanf("%d", &N);

	for (int i = 1; i <= N; i++) {
		scanf("%d %d %d", &R, &G, &B);
		colors[0].push_back(R); // 순서별 빨간색 비용
		colors[1].push_back(G); // 순서별 초록색 비용
		colors[2].push_back(B); // 순서별 파랑색 비용
	}

	if (N == 1) {
		for (int i = 0; i < 3; i++) {
			if (min_sum > colors[i][1]) {
				min_sum = colors[i][1]; // 집이 하나일 때는 가장 비용이 적은 색깔 고르면 됨
			}
		}
	}
	else { // 집이 두개 이상일 때는
		for (int i = 2; i <= N; i++) { // 2번째 항부터 차례로 누적합을 구해줌
			for (int c = 0; c < 3; c++) {
				int sum1, sum2;

				if (c == 0) { // i번째가 빨간색일 때 
					sum1 = colors[1][i - 1] + colors[0][i]; // i-1번째가 초록색인 누적합과의 합
					sum2 = colors[2][i - 1] + colors[0][i]; // i-1번째가 파랑색인 누적합과의 합

					if (sum1 > sum2) { // 이 중 최솟값을 현재 항에 넣어줌
						colors[0][i] = sum2;
					} else
						colors[0][i] = sum1;
				}
				else if (c == 1) { // i번째가 초록색일 때
					sum1 = colors[0][i - 1] + colors[1][i];
					sum2 = colors[2][i - 1] + colors[1][i];

					if (sum1 > sum2) {
						colors[1][i] = sum2;
					}
					else
						colors[1][i] = sum1;
				}
				else { // i번째가 파랑색일 때
					sum1 = colors[0][i - 1] + colors[2][i];
					sum2 = colors[1][i - 1] + colors[2][i];

					if (sum1 > sum2) {
						colors[2][i] = sum2;
					}
					else
						colors[2][i] = sum1;
				}
			}
		}

		for (int i = 0; i < 3; i++) {
			if (min_sum > colors[i][N]) { // N번째 항이 곧 누적 합의 최솟값이므로
				min_sum = colors[i][N]; // 그 중 가장 작은 것이 최솟값
			}
		}
	}

	printf("%d", min_sum);

	return 0;
}