/*

https://www.acmicpc.net/problem/1931

백준 온라인 저지 1931번 문제: 회의실 배정

*/

#include <stdio.h>
#include <stdlib.h>
#define MAX 100001

typedef struct _Time {
	int start;
	int finish;
} Time; // 시작 시간, 종료 시간을 포함한 구조체 선언

int compare(const void *A, const void  *B);
int max_conf(Time*, int);
int cnt = 0;

int main()
{
	Time t[MAX];
	int n, i;

	scanf("%d", &n); // 회의 수

	for (i = 0; i < n; i++)
		scanf("%d %d", &t[i].start, &t[i].finish); // n개의 회의 각각의 시작 & 종료 시간

	qsort(t, n, sizeof(Time), compare); // 종료 시간 기준 정렬한 조건에서 시작 시간 기준으로 오름차순 정렬
	printf("%d",max_conf(t, n)); 
	return 0;
}

int compare(const void *A, const void  *B)
{
	Time* ptrA = (Time*)A;
	Time* ptrB = (Time*)B;

	if (ptrA->finish < ptrB->finish)
		return -1;
	else if (ptrA->finish > ptrB->finish) // 종료 시간을 기준으로 오름차순 정렬 후 최댓값 파악 (빨리 끝나야 많이 하지)
		return 1;
	else if (ptrA->finish == ptrB->finish) { // 종료 시간이 같을 때
		if (ptrA->start < ptrB->finish)
			return -1;
		else if (ptrA->finish > ptrB->start) // 시작 시간이 빠른 놈을 먼저 정렬함
			return 1;
		else
			return 0;
	}
}

int max_conf(Time* ct, int s)
{
	Time temp;
	temp = ct[0];
	cnt++;
	for (int i = 1; i < s; i++)
	{
		if (temp.finish <= ct[i].start || ct[i].start == ct[i].finish) // 앞의 종료 시간과 같거나 큰 시작 시간 혹은 시작 시간과 같은 종료 시간
		{
			temp = ct[i];
			cnt++;
		}
	}
	return cnt;
}