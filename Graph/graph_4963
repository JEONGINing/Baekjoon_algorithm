#include <iostream>
#include <vector>
#include <stdio.h>

using namespace std;

typedef struct _que {
	int x, y;
} que;
int map[50][50];
int mx[8] = {0, 0, 1, -1, 1, 1, -1, -1};
int my[8] = {1, -1, 0, 0, 1, -1, 1, -1};
vector <int> result;
que q[2501];

void BFS(int wt, int ht) {
	int visited[50][50] = { 0, };
	int px, py;
	int r = 0;

	for (int i = 0; i < ht; i++) {
		for (int j = 0; j < wt; j++) {
			if (map[i][j] && !visited[i][j]) {
				int front = 0, rear = 0;
				visited[i][j] = 1;
				q[0].x = i; q[0].y = j;
				rear++;

				while (front < rear) {
					px = q[front].x;
					py = q[front++].y;
					for (int k = 0; k < 8; k++) {
						int xx = px + mx[k];
						int yy = py + my[k];
						if (xx >= 0 && xx < ht && yy >= 0 && yy < wt) {
							if (map[xx][yy] && !visited[xx][yy]) {
								visited[xx][yy] = 1;
								q[rear].x = xx; q[rear].y = yy;
								rear++;
							}
						}
					}
				}
				r++; // 섬 개수 카운트
			}
		}
	}
	
	result.push_back(r); // 이 그래프의 섬 개수 입력
}

int main()
{
	int w, h;

	scanf("%d %d", &w, &h);

	while (w && h) { // 0 0 입력할 때까지
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				scanf("%d", &map[i][j]);
			}
		}
		BFS(w, h);
		scanf("%d %d", &w, &h);
	}

	int rsize = result.size();
	for (int i = 0; i < rsize; i++)
		printf("%d\n", result[i]);

	return 0;
}
