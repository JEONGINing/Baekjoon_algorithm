/*

https://www.acmicpc.net/problem/2667

백준 온라인 저지 2667번: 단지 번호 붙이기

/*

#define MAX 26
#include <stdio.h>
#include <stdlib.h>

typedef struct _queue
{
	int x, y;
} queue;

int map[MAX][MAX] = { 0, };
int visit[MAX][MAX] = { 0, };
int mx[4] = { 1, -1, 0, 0 };
int my[4] = { 0, 0, 1, -1 };
queue q[676];

int compare(const void *a, const void *b) {
	return *(int *)a - *(int *)b; // 오름차순
}

void BFS(int n)
{
	int i, j, k, comp_count = 0; // 단지 수 저장
	int house_by_complex[338]; // 단지 별 가구 개수 저장

	for (i = 1; i <= n; i++) {
		for (j = 1; j <= n; j++) {
			if (map[i][j] == 0 || visit[i][j] != 0) 집이 없는 곳 혹은 방문한 곳일 때
				continue;
			else { 			// 집이 있고, 방문하지 않은 곳일 때
				int front = 0, rear = 0, px, py, comp;
				q[0].x = i; q[0].y = j;
				comp = 1; // 이 집이 포함된 단지의 가구 수 카운트
				visit[i][j] = 1;
				rear++;

				while (front < rear) {
					px = q[front].x; py = q[front].y;
					front++;

					for (k = 0; k < 4; k++) {
						if (map[px + mx[k]][py + my[k]] == 1 && visit[px + mx[k]][py + my[k]] == 0) {
							q[rear].x = px + mx[k];
							q[rear].y = py + my[k];
							visit[px + mx[k]][py + my[k]] = ++comp;
							rear++;
						}
					}
				}
				house_by_complex[comp_count++] = comp; // 단지 가구수 저장
			}
		}
	}

	printf("%d\n", comp_count); // 단지 수
	
	qsort(house_by_complex, comp_count, sizeof(int), compare); // 오름차순 정렬 후

	for (i = 0; i < comp_count; i++)
		printf("%d\n", house_by_complex[i]); // 단지 별 가구 수 출력

	return;
}

int main()
{
	int n, i, j;

	scanf("%d", &n);

	for (i = 1; i <= n; i++) {
		for (j = 1; j <= n; j++)
			scanf("%1d", &map[i][j]);
	}

	BFS(n);

	return 0;
}